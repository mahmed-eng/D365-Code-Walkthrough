[SRSReportParameterAttribute(classStr(DIN_TillOpeningBalContract))]
public class DIN_TillOpeningBalDP extends SrsReportDataProviderPreProcessTempDB
{
    DIN_TillOpeningBalContract                contract;
    DINTillOpeningBalTmp                      dinTillOpeningBalTmp;
    CompanyInfo                               companyinfo;
    List                                      listStore;
    ListEnumerator                            listEnumStore;
    TransDate                                 fromDate, todate;
    //str                                       storeId;
    //RetailAmountTendered                      openingBalance, dinOpeningBalance;
    RetailStoreTable                          retailStoreTable,retailStoreTable1,retailStoreTable2,retailStoreTable3;
    RetailTransactionIncomeExpenseTrans       retailTransactionIncomeExpenseTrans,retailTransactionIncomeExpenseTrans1,retailTransactionIncomeExpenseTrans2,retailTransactionIncomeExpenseTrans3;
    RetailTransactionInfocodeTrans            retailTransactionInfocodeTrans;
    RetailIncomeExpenseAccountTable           retailIncomeExpenseAccountTable,retailIncomeExpenseAccountTable1,retailIncomeExpenseAccountTable2,retailIncomeExpenseAccountTable3;
    RetailTransactionTable                    retailTransactionTable, retailTransactionTable1,retailTransactionTable2,retailTransactionTable3;
    RetailStoreView                           retailStoreView;
    DIN_tillOpeningBaltbl                     din_tillOpeningBaltbl;


    [SrsReportDataSetAttribute(tableStr('DINTillOpeningBalTmp'))]
    public DINTillOpeningBalTmp getdinTillOpeningBalTmp()
    {
        select * from dinTillOpeningBalTmp;

        return dinTillOpeningBalTmp;

    }

    public void processReport()
    {
        contract    =  this.parmDataContract() as DIN_TillOpeningBalContract;

        fromDate    =  contract.parmFromDate();
        todate      =  contract.parmToDate();
        listStore   =  contract.parmStoreId();

        this.populateExpenseData();
       
        //select * from din_tillOpeningBaltbl
        //                where din_tillOpeningBaltbl.Petty_Cash_Opening_Date == str2Date('1/31/2022', 213)
        //                && din_tillOpeningBaltbl.StoreId == storeId;
        //{
        //    dinOpeningBalance = din_tillOpeningBaltbl.Petty_Cash_Opening_Balance;
        //}

    }

    public RetailAmountTendered getOpeningBalance(TransDate openingDate, str storeId)
    {
        DIN_tillOpeningBaltbl dinTillOpeningBal;
        RetailAmountTendered openingBalance = 0;

        select firstOnly Petty_Cash_Opening_Balance from dinTillOpeningBal
        where dinTillOpeningBal.Petty_Cash_Opening_Date == openingDate
        && dinTillOpeningBal.StoreId == storeId;

        if (dinTillOpeningBal)
        {
            openingBalance = dinTillOpeningBal.Petty_Cash_Opening_Balance;
        }

        return openingBalance;
    }

  public RetailAmountTendered calculateCashIssues(TransDate fromDate1, TransDate toDate1, str storeId)
    {
        //RetailTransactionIncomeExpenseTrans retailTransaction;
        RetailAmountTendered totalCashIssues = 0;

        while select * from retailStoreTable
                     join retailTransactionTable
                     where retailTransactionTable.Channel == retailStoreTable.RecId
                     join retailTransactionIncomeExpenseTrans
                     where retailTransactionIncomeExpenseTrans.transactionid == retailTransactionTable.transactionId
                     && retailTransactionIncomeExpenseTrans.store == retailTransactionTable.store
                     && retailTransactionIncomeExpenseTrans.terminal == retailTransactionTable.terminal
                     join retailIncomeExpenseAccountTable
                     where retailIncomeExpenseAccountTable.StoreId  == retailTransactionIncomeExpenseTrans.store
                     && retailIncomeExpenseAccountTable.accountNum  == retailTransactionIncomeExpenseTrans.incomeExepenseAccount
                     && (retailIncomeExpenseAccountTable.name  like 'Other Exp.*')
                     && retailTransactionTable.type == RetailTransactionType::IncomeExpense
                     && (retailStoreTable.StoreNumber == storeId)
                     && retailTransactionIncomeExpenseTrans.transDate >= fromDate1 && retailTransactionIncomeExpenseTrans.transDate <= toDate1
                     && retailTransactionTable.entryStatus != RetailEntryStatus::Voided

        {
            totalCashIssues = retailTransactionTable.grossAmount;
        }

        return totalCashIssues;
    }

    public RetailAmountTendered calculateExpenses(TransDate fromDate2, TransDate toDate2, str storeId)
    {
      //  RetailTransactionIncomeExpenseTrans retailTransaction;
        RetailAmountTendered totalExpenses = 0;   

              while select * from retailStoreTable
                     join retailTransactionTable
                     where retailTransactionTable.Channel == retailStoreTable.RecId
                     join retailTransactionIncomeExpenseTrans
                     where retailTransactionIncomeExpenseTrans.transactionid == retailTransactionTable.transactionId
                     && retailTransactionIncomeExpenseTrans.store == retailTransactionTable.store
                     && retailTransactionIncomeExpenseTrans.terminal == retailTransactionTable.terminal
                     join retailIncomeExpenseAccountTable
                     where retailIncomeExpenseAccountTable.StoreId  == retailTransactionIncomeExpenseTrans.store
                     && retailIncomeExpenseAccountTable.accountNum  == retailTransactionIncomeExpenseTrans.incomeExepenseAccount
                     && !(retailIncomeExpenseAccountTable.name  like 'Other Exp.*')
                     && retailTransactionTable.type == RetailTransactionType::IncomeExpense
                     && (retailStoreTable.StoreNumber == storeId)
                     && retailTransactionIncomeExpenseTrans.transDate >= fromDate2 && retailTransactionIncomeExpenseTrans.transDate <= toDate2
                     && retailTransactionTable.entryStatus != RetailEntryStatus::Voided

        {
            totalExpenses = retailTransactionTable.grossAmount;
        }

        return totalExpenses;
    }

    private void populateExpenseData()
    {
        if(listStore && !listStore.empty())
        {
            listEnumStore = listStore.getEnumerator();
            while(listEnumStore.moveNext())
            {
             str   storeId  =  listEnumStore.current();

                TransDate openingBalanceDate = str2Date("1/31/2022", 213);
                TransDate fromDate1 = fromDate;
                TransDate toDate1 =   toDate;
                TransDate fromDate2 = fromDate;
                TransDate toDate2 =   toDate;

                RetailAmountTendered openingBalance = this.getOpeningBalance(openingBalanceDate, storeId);
                RetailAmountTendered cashIssues = this.calculateCashIssues(fromDate1, toDate1, storeId);
                RetailAmountTendered expenses = this.calculateExpenses(fromDate2, toDate2, storeId);

                //RetailAmountTendered adjustedOpeningBalance = openingBalance + cashIssues - expenses;
               

                while select * from retailStoreTable
                     join retailTransactionTable
                     where retailTransactionTable.Channel == retailStoreTable.RecId
                     join retailTransactionIncomeExpenseTrans
                     where retailTransactionIncomeExpenseTrans.transactionid == retailTransactionTable.transactionId
                     && retailTransactionIncomeExpenseTrans.store == retailTransactionTable.store
                     && retailTransactionIncomeExpenseTrans.terminal == retailTransactionTable.terminal
                     join retailIncomeExpenseAccountTable
                     where retailIncomeExpenseAccountTable.StoreId  == retailTransactionIncomeExpenseTrans.store
                     && retailIncomeExpenseAccountTable.accountNum  == retailTransactionIncomeExpenseTrans.incomeExepenseAccount
                     && !(retailIncomeExpenseAccountTable.name  like 'Other Exp.*')
                     //&& !(retailIncomeExpenseAccountTable.name  like 'Petty*') //&& retailIncomeExpenseAccountTable.name == 'Conveyance'
                     && retailTransactionTable.type == RetailTransactionType::IncomeExpense
                     && (retailStoreTable.StoreNumber == storeId)
                     && retailTransactionIncomeExpenseTrans.transDate >= fromDate && retailTransactionIncomeExpenseTrans.transDate <= todate
                     && retailTransactionTable.entryStatus != RetailEntryStatus::Voided
                
              
       
                {
                    select firstonly Name from retailStoreView
                                 where retailStoreView.StoreNum == retailStoreTable.StoreNumber;

                    dinTillOpeningBalTmp.clear();

                    dinTillOpeningBalTmp.FromDate       =    fromDate;
                    dinTillOpeningBalTmp.ToDate         =    todate;
                    dinTillOpeningBalTmp.StoreId        =    storeId;
                    dinTillOpeningBalTmp.StoreName      =    retailStoreView.Name;
                    dinTillOpeningBalTmp.CompanyName   = CompanyInfo::find().Name;
                    dinTillOpeningBalTmp.CompanyLogo   = CompanyImage::findByRecord(companyinfo).Image;
                    
                   

                    if(retailIncomeExpenseAccountTable.accountType == RetailIncomeExpense::Expense)
                    {
                        


                        dinTillOpeningBalTmp.ExpName     =   retailIncomeExpenseAccountTable.name;
                        dinTillOpeningBalTmp.ExpAmount        = retailTransactionTable.grossAmount;
                        dinTillOpeningBalTmp.ODate          =   retailTransactionIncomeExpenseTrans.transDate;

                                            

                        
                    }
                         
                   
                    select * from retailStoreTable1
                     join retailTransactionTable1
                     where retailTransactionTable1.Channel == retailStoreTable1.RecId
                     join retailTransactionIncomeExpenseTrans1
                     where retailTransactionIncomeExpenseTrans1.transactionid == retailTransactionTable1.transactionId
                     && retailTransactionIncomeExpenseTrans1.store == retailTransactionTable1.store
                     && retailTransactionIncomeExpenseTrans1.terminal == retailTransactionTable1.terminal
                     join retailIncomeExpenseAccountTable1
                     where retailIncomeExpenseAccountTable1.StoreId  == retailTransactionIncomeExpenseTrans1.store
                     && retailIncomeExpenseAccountTable1.accountNum  == retailTransactionIncomeExpenseTrans1.incomeExepenseAccount
                     && (retailIncomeExpenseAccountTable1.name  like 'Other Exp.*')
                     //&& !(retailIncomeExpenseAccountTable.name  like 'Petty*') //&& retailIncomeExpenseAccountTable.name == 'Conveyance'
                     && retailTransactionTable1.type == RetailTransactionType::IncomeExpense
                     && (retailStoreTable1.StoreNumber == dinTillOpeningBalTmp.StoreId)
                     && retailTransactionIncomeExpenseTrans1.transDate >= dinTillOpeningBalTmp.ODate && retailTransactionIncomeExpenseTrans1.transDate <= dinTillOpeningBalTmp.ODate
                        && retailTransactionTable1.entryStatus != RetailEntryStatus::Voided;
                    {
                        if(retailIncomeExpenseAccountTable1.accountType == RetailIncomeExpense::Expense)
                        {
                            dinTillOpeningBalTmp.CashIssue        = retailTransactionTable1.grossAmount;
                            dinTillOpeningBalTmp.ODate          =    retailTransactionIncomeExpenseTrans1.transDate;
                        }
                    }

                   // dinTillOpeningBalTmp.OpeningBalance = adjustedOpeningBalance;
                   
                    dinTillOpeningBalTmp.insert();
                }
            }
        }
    }

}